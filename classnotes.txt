getwd() : get working directory
dir()

ls(environment(function_name)), to get the environment of the function listed out
to change the working directory : got to FILE--> working directory
source("code.R")  : to load a function

everything is an object
Data types:
	char
	numeric
	integer
	complexed
	logical
	
the most basic : vector --> but a homogeneous container

LIST --> heterogenous vector
empty vector --> vector()

Numbers: 
a numeric object
Inf --> stands for infinity, a special number
NaN --> not a number

Attributes:
	names, dimnames
	dimensions
	class
	length
	other user-defined attributes
	
	attributes() : a function
	
Assignment Operator :  x <- 1
Comments : ##

[1] : this indicates that the variable is a vector	

x <- 1:20

Creating vectors:
	the "c()" function
	the "vector()" function
	
	example  :  x <- c(1,2,3,4)
	
Mixing Objects (implicit coercion)
	y <- c(1.7,"a")
	
	--> in such cases, a simple coercion happens, and all the elements 
	are converted to a same type.
	
Explicit Coercion 
		x <- 0:6
		as.numeric(x);
		
Matrices :
	Nothing but a vector with the attribute DIMENSION
	examples : m <- matrix(1:6 , nrow = 2 , ncol = 3)

	VIMP : they get constructed column wise!!!!!
	
	You can convert a vector to a matrix by just giving it a dim() attribute
	m <- 1:10
	dim(m) <- c(2,5)
	
	
	cbind-ING and rbind-ING
	x <- 1:3
	y <- 4:6
	
	cbind(x,y) 
	rbind(x,y)
	
A LIST!!
	its like a vector of vectors!
	as it holds different data-types, each element is a vector of elements of that data-type
	symbol : [[1]]
	
Factor : 
	used for ordering data!
	catergorizing data
	its like enums!
	its integer based.
	
	example : x <- factor(c("yes" , "yes", "no" ,"no" , "yes"))
				Levels of this factor : yes , no
				
	tables(x) : gives the frequency of all the levels present
	unclass(x) : will give the internal INT values of the different elements
	
	
	Baseline element : the level from which the internal numbering(INT) of the 
	elements start.
	
						:Can be made explicit by using the levels() function
						: levels = c("yes", "no")
		
		
	
	
Missing Values
	is.na()
	is.nan()
	NaN is a na but the reverse is not always a true
	
Data Frames:
	used to store tabular data
	a special type of list.
	every element is a list of the same length
	but every element of the list needn't be of the same type
	attribute : row.names
	function : read.table() or read.csv()
	can be converted/coerce to a matric by data.matrix
	
	
	Example :  x <- data.frame(foo = 1:4 , bar = c(t,f,t,f))

All the variable can have names;
function :  names()


Sub-setting:
	'[' : to get the element with the same class as that of the parent
	'[[' : for getting the elements of a list
	'$' : to get the elements of  a list with names		
	
	
	l <- list(foo = c(1:4) , bar = c(5:9))
	l[["foo"]]
	l$foo
	
	name = "foo"
	l[[name]]  //this implies l$foo 
	
	//to get the multiple elements of the list: for example if the list has three elements
	l(c(1,3)), will return the first and the third element of the list
	
	Nested list : 
	lol <- list(a = list(10,12,123))
	lol[[1]][[2]] ==> 12

	
	Partial matching!!
		when using $ sign , you can give a partial name match too.
		when you use the [[ operator this is not the case, so for that 
		you the following
		x[["a" , exact=FALSE]]
	mat(1,2)
	
Note: 
	when you try to extract a single element from a matric , you do 
	not get a 1 x 1 matrix in return but just a single element.
	In order to turn off this default behaviour, set the DROP=flase
	
	example x[1,2,frop=FLASE]
	
	**ncol function to get the number of columns, similarly nrow(), for the number of rows
	
	Similarly , when you sub-set a single rox/column, you don't get a matrix, but a list in return.
	Again you can use drop=FALSE

Subsetting a list : 
		x <- lisut(foor  =1:4 , bar = 0.6)
		x[1]
		x[[1]]
		x$bar : element associated with the element $bar
		a["bar"] //good thing, you dont need to remember its index
	
		if you want the "indexed name" to be dynamic then you use 2 brackets
		name <- "foo"
		x[[name]]

		incase GOOD <- [TRUE,FLASE...] is a logical list.
		and you say X[good] , this will return a list that is a subset of
		X, but with the elements positioned such that they are TRUE in GOOD

		there is something called...
			complete.cases(),
			which too helps in removing the NA elements from the list
		
Read and write data
	 read.table
	 read.csv
	 readlines
	source //for reading in the R codes into the eexcutable environment
	dget //read R objects
	load //reading binary files


writing:
	write.table
	writeLines
	dump
	dput
	save
	serialize

read.csv is same as read.table except that the delimiter is a comma

please always specify the TYPE of data in the file , and specify the same using colClasses, else R will take a lot of time figuring out what kind of classes its reading and in case of large datasets it will slow down thigs pretty bad

there is an argument called NROWs, which gives R an estimate on the number of rows it will be reading. Helps it in estimating the RAM usage.
Even if you give the wrong number doesnt matter as it will still read all of them.
	

Textual Formats , not very space efficient, but easier to read

**dump same as dput but , dump allows you to dump multiple R objects together

Interface to the outside world
	file, gzfile, bzfile, url 

	
	
LOOPS and Stuff
	for(i in 1:10)
	{
	}
	
	for(i in seq_along(x))
	{
	}
	
	for(letter in x)
	{
	}
	
	
Functions:
	using the function()n directive.
	function is also stored as an R object
	
	f <- funciotn(<args>) { do something}
	
	**functions are considered "first class objects", and so they are like
	normal R objects
	
	Functions with named arguments, and with default values
	
	**function FORMALS(), to get the args of a function
	
	Example :
		f <- function(a,b)
		{
		}
		
	Lazy evaluation:
		An argument is not evaluated, until and unless its not used
	
	
		functions(a,b,...) //generic args!!!

		the function returns what ever the last expression of the function evaluates to
		
		
Scoping Rules : 
	search() , will tell you where all the functions are searched for . Its like the environment inside which R is running
	
	R uses static scoping or 
	
	We can have a function inside another function
	
	
Vectorized Operations :
	Element By element Matrix Multiplication  : x * y
	True Matrix Multiplication :  x %*% y

Dates and Times:
		Dates : Date class (number of days since 1970-01-01)
		Time : POSIXct and POSIXlt (number of seconds since 1970-01-01)
		
		x <- as.Date("1970-01-01");
		unclass(x)
		
		POSIXct : uses a huge integer underneath
		POSIXlt : uses a list internally
		
		general funtions on them : weekdays , months , quarter
	
	
		as.POSIXct , as.POSIXlt
		
		x <- Sys.time()
		
		unclass(x)
		
		STRPTIME() , function!!!
		
Looping Functions :
	lapply	: 
		loop over a list
		function(X , function pointer , ...)
		
	runif : this is a function to generate random numbers
			: It takes in argument as the number of random numbers you want
			: min = , max , can be specified as its arguments too
			
			
	sapply : 
		same as sapply, but just tries to simplify the result it returns
		returns a single element in case the answer is a list of length 1
		returns a matrix in case the result is a list of vectors of the same length
		
	tapply : 
		used to apply function over subsets of a vector. No clue why its named like that
		
		function( X , INDDEX ,FUN = NULL , ... , simplify = TRUE)
		how does it work?
			we have two vectors , 
			the first one is the one, which is the one , based on whose length
			we shall be dividing the second vector.
			The second vector is the target vector which will be divided and given to the FUNCTIOn
		
NOTE!!! (some confusing stuff here!)
		function  : gl()
		gl(number_of_levels , number of elements in eash level) , 
		this function is used to create factors/level
		
		split( the_vector_that_we_want_to_split , factors_returned_by_gl)
	
		example : 
			x <- c(1:30)
			fac <- gl(3 , 10)  //this will have 30 elements
			
			split(x, fac) ,
				will divide x, into 3 groups of 10 each
			
			fac1 <- gl(2,15) //will have a total of 30 elements
			split(x , fac1)
				will divide x into 2 groups of 15 elements each
			
	
Example : 
	consider the data set of Ozone, Temp... so on given in the week one assignment.
	Now if we want to split them using the MONTH column.
	
	s <- split(dataset , dataset$Month)
	//Now we know that the column Month is not of the type Vector, 
	but as it takes only thr values 5,6,7, it can act as one.
	
	Now if we want to take the means of the column data, we can do the following
	
	lapply(s , function colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = TRUE))	
	sapply(s , function colMeans(x[, c("Ozone","Solar.R","Wind")]))	
	
	Note : attribute na.rm ==>> to remove the NA entries befor the MEAN calculation
	
Splitting on more than one level : 
		f1 <- gl(2,5)
		f2 <- gl(5,2)
		interaction(f1,f2)
			this will return a new set of factor combining the two above levels
	
MAAPLY:
	multivariate apply of sorts which applies a function in parallel over a 
	set of arguments
	
invisible(x)
		a function that returns invisibly, will make sure that it returns
	the value but nothing is printed on the console	
	
	
Debugging!! :
	traceback
		prints the function call stack
		
	debug:
		when you mark a function with this, you can execute it line by line
		--stops execution at the beginning of the function
	browser:
		to go to the debug mode in the middle of a function
	
	trace:
		insert the debugging code without editing the main function
	
	recover :
		works like  a try catch block, and you can browse through the function call stack